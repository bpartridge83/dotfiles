#! /bin/bash
# Requires Powerline patched fonts: https://gist.github.com/1595572
# Colors from http://www.arwin.net/tech/bash.php

# pass foreground then background (optional)
function _color() {
	local PROMPT_COLOR_OUTPUT="\[\e[0m\]"

	if ! [ -z $1 ]; then
		PROMPT_COLOR_OUTPUT="\[\e[$1m\]"
	fi

	if ! [ -z $2 ]; then
		PROMPT_COLOR_OUTPUT="\[\e[$2m\]${PROMPT_COLOR_OUTPUT}"
	fi

	echo $PROMPT_COLOR_OUTPUT
}

function _gitStatus() {	
	if ! [ `type -t __git_ps1`"" == 'function' ]; then
		return
	fi

#	local FORBIDDEN="homebrew.git"
	local GIT_STATUS_TEXT="$(__git_ps1 "%s")"

	if [[ -n "$GIT_STATUS_TEXT" ]]; then
#		local GIT_REPO=''
#		local GIT_REMOTE=`git remote -v`
		local SHOW_GIT=1

#		if ! [ -z "$GIT_REMOTE" ]; then	
#			GIT_REPO=$(basename `echo $GIT_REMOTE | grep origin | grep push | awk '{print $2;}'`)
#			for REPO in $FORBIDDEN; do
#				if [ $GIT_REPO = $REPO ]; then
#					SHOW_GIT=0
#				fi
#			done
#			GIT_REPO="$GIT_REPO "
#		fi

		if [ $SHOW_GIT = 1 ]; then
			SYMBOL=$BRANCH
			if [[ "$GIT_STATUS_TEXT" == master* ]] || [[ "$GIT_STATUS_TEXT" == develop* ]]; then
				SYMBOL=$MASTER
			fi
			GIT_STATUS="$(_color $C_WHITE $C_BG_MAGENTA)${SEPARATOR}$(_color)$(_color $C_WHITE $C_BG_MAGENTA) ${SYMBOL} ${GIT_STATUS_TEXT} $(_color)$(_color $C_MAGENTA)${SEPARATOR}$(_color)"
		fi
	fi

	echo "$GIT_STATUS"
}

function _svnStatus() {
	local SVN_STATUS_TEXT=''
	local REVISION=$(svn info 2>/dev/null | awk '/^Revision:/{print $2}')

	if ! [ -z "$REVISION" ]; then
#		local REPO_NAME=$(basename `svn info 2>/dev/null | awk '/^Repository Root:/{print $3}'`)
		SVN_STATUS_TEXT="$(_color $C_WHITE $C_BG_CYAN)${SEPARATOR}$(_color)$(_color $C_BLACK $C_BG_CYAN) ${MASTER} ${REVISION} $(_color)$(_color $C_CYAN)${SEPARATOR}$(_color)"
	fi

	echo "$SVN_STATUS_TEXT"
}

function _pythonVirtualenv() {
    local PYTHON_VIRTUALENV=""

    if ! [ -z "$VIRTUAL_ENV" ]; then
        PYTHON_VIRTUALENV="$(_color $C_YELLOW $C_BG_BLACK)${SEPARATOL}$(_color $C_BLACK $C_BG_YELLOW) `basename \"$VIRTUAL_ENV\"` $(_color $C_YELLOW $C_BG_BLACK)${SEPARATOR}$(_color)"
    fi
	
	echo "$PYTHON_VIRTUALENV"
}

function _prompt() {	
	local LAST_RETURN=$?
	
	# Symbols
	local SEPARATOR="⮀"
	local SEPARATOL="⮂"
	local BRANCH="⭠"
	local MASTER="☰"

	# Text Colors
	local C_BLACK='30'
	local C_RED='31'
	local C_GREEN='32'
	local C_YELLOW='33'
	local C_BLUE='34'
	local C_MAGENTA='35'
	local C_CYAN='36'
	local C_WHITE='37'

	# Background Colors
	local C_BG_BLACK='40'
	local C_BG_RED='41'
	local C_BG_GREEN='42'
	local C_BG_YELLOW='43'
	local C_BG_BLUE='44'
	local C_BG_MAGENTA='45'
	local C_BG_CYAN='46'
	local C_BG_WHITE='47'

	local STATUS_COLOR="1;$C_GREEN"

	if ! [[ $LAST_RETURN -eq 0 ]]; then
		STATUS_COLOR="1;$C_RED"
	fi

#	local LOCAL_HOSTNAME=`scutil --get LocalHostName`
	local PYTHON_VIRTUALENV=$(_pythonVirtualenv)

	local GIT_STATUS=$(_gitStatus)
	local SVN_STATUS=$(_svnStatus)

	SCM_STATUS="$(_color $C_WHITE $C_BG_BLACK)${SEPARATOR}$(_color)"
	if ! [ -z "$GIT_STATUS" ]; then
		SCM_STATUS="$GIT_STATUS"
	elif ! [ -z "$SVN_STATUS" ]; then
		SCM_STATUS="$SVN_STATUS"
	fi

	PROMPT="$(_color $C_BLACK $C_BG_WHITE) \W $(_color)${SCM_STATUS}$(_color)${PYTHON_VIRTUALENV} "
	PS1=${PROMPT}
}

case "$TERM" in
	xterm-color) 
		color_prompt=yes
	;;
	xterm-256color) 
		color_prompt=yes
	;;
esac

if [ "$color_prompt" = yes ]; then
	PROMPT_COMMAND=_prompt
else
	PS1='\[\e[1;32m\]\u@\h \W:$(__git_ps1) \$\[\e[0m\] '
fi

unset color_prompt
